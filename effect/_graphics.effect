// Effect Syntax Guide: https://github.com/cocos-creator/docs-3d/blob/master/zh/material-system/effect-syntax.md


CCEffect %{
  techniques:
  - passes:
    - vert: vs:vert
      frag: fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: one
          blendDst: one_minus_src_alpha
          blendSrcAlpha: one
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      depthStencilState:
        depthTest: false
        depthWrite: false
      properties:
        i_min: { value: [0., 0.], target: i_min_max_uv.xy}
        i_max: { value: [1., 1.], target: i_min_max_uv.zw}
        switchTexture: {value: white}
        cells: {value: [1,1]}
        fps: { value: 1. }
}%

CCProgram vs %{
  #include <graphics-vs>
}%

CCProgram fs %{
  #include <graphics-fs>
  #include <cc-global>
  #include <embedded-alpha>
  #include <alpha-test>
  #include <utils>

   uniform sampler2D switchTexture;
     
    uniform SwitchData{
      vec2 cells;
      float fps;
    };

  // 一个彩虹色的色板，输入t的范围是[0, 1], 输出一个颜色值
  vec3 Pallete(float t) {
      // 滚动动起来
      t += cc_time.x;
      
      vec3 dcOffset = vec3(0.5, 0.5, 0.5);
      vec3 amp = vec3(1., 1., 1.);
      vec3 freq = vec3(1., 1., 1.);
      vec3 phase = vec3(0., 0.3333, 0.6666);
      return dcOffset + amp * cos(2. * 3.14159 * (freq * t + phase));
  }

  vec4 frag () {
    //初始化自定义图形的颜色和 uv
    initGraphicsColorUV();
    if (!isUvInside()){
    // float D = abs(v_dist);//v_dist * 0.5 + 0.5;
    // color.rgb = Pallete(D);
      discard;
    }

    #if IS_SWITCH
      vec4 c2 = textureSwitch(switchTexture, uv0, cells, fps);
    color.rgb += c2.rgb;
    #endif
    return color;
  }
}%
