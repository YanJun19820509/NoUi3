// Effect Syntax Guide: https://github.com/cocos-creator/docs-3d/blob/master/zh/material-system/effect-syntax.md

CCEffect %{
  techniques:
  - passes:
    - vert: vs:vert 
      frag: unlit-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties: 
        width: { value: 0.1, editor: {range: [0.0, 1.0, 0.01]} }
        strength: { value: 1.5, editor: {range: [0.0, 10.0, 0.01]} }
        # 合图中的区域
        factRect: { value: [1.0,1.0,1.0,1.0], editor: {visible: false}}
        # 合图中的比率
        ratio: { value: 1.0, editor: {visible: false}}
}%

CCProgram vs %{
  #include <common-vs>
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <cc-global>
  #include <embedded-alpha> 
  #include <alpha-test>
  #include <common-fs>
  #include <utils>

float rgb2luma(vec3 color) {
    return dot(color, vec3(0.299, 0.587, 0.114));
}

float rgb2luma(vec4 color) {
    return rgb2luma(color.rgb);
}

vec4 bilateralBlur2D( sampler2D tex,  vec2 st,  vec2 offset, const int kernelSize) {
  vec4 accumColor = vec4(0.);
  float accumWeight = 0.;
  const float k = .15915494; // 1. / (2.*PI)
  const float k2 = k * k;
  float kernelSize2 = float(kernelSize) * float(kernelSize);
  vec4 tex0 = texture(tex, st);
  float lum0 = rgb2luma(tex0);

  for (int j = 0; j < 10; j++) {
    float dy = -.5 * (float(kernelSize) - 1.0) + float(j);
    for (int i = 0; i < 10; i++) {
      float dx = -.5 * (float(kernelSize) - 1.0) + float(i);
      vec4 tex = texture(tex, st + vec2(dx, dy) * offset);
      float lum = rgb2luma(tex);
      float dl = 255. * (lum - lum0);
      float weight = (k2 / kernelSize2) * exp(-(dx * dx + dy * dy + dl * dl) / (2. * kernelSize2));
      accumColor += weight * tex;
      accumWeight += weight;
    }
  }
  return accumColor / accumWeight;
}

  uniform Constant{ 
    float width;
    float strength;
  };

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1); 

    #if USE_TEXTURE
    o *= bilateralBlur2D(cc_spriteTexture,uv0, vec2(0.5,0), 10);
    #endif

    float start = fract(cc_time.x) * 2.0; 
    float w = width * factRect.z;

    #if USE_SHINE
      #if IS_REVERSE
        o = shine(o, uv0, start, w, strength, true);
      #else
        o = shine(o, uv0, start, w, strength, false);
      #endif
    #endif

    o*=color;
    ALPHA_TEST(o);
    return o;
  }
}%
