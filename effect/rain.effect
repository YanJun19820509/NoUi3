// Effect Syntax Guide: https://github.com/cocos-creator/docs-3d/blob/master/zh/material-system/effect-syntax.md

CCEffect %{
  techniques:
  - passes:
    - vert: vs:vert 
      frag: unlit-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        radian: { value: 0., editor: { range: [-1.0, 1.0], tooltip: '左右方向' } }
        speed: { value: 1., editor: { tooltip: '速度' } }
}%

CCProgram vs %{
  #include <./common-vs>
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <./common-fs>
  #include <./utils>
     
  uniform RainData{
    float radian;
    float speed;
  };

  float  drawLayer(float scale,vec2 uv)
  {
    // 注释设 scale为10的情况
    // 输出值
    float co = 0.;

    // 拷贝一份uv用，不修改原uv
    vec2 uv1 = uv;

    // uv值范围从 0-1变为 0-scale scale值为10就是0-10范围
    uv1 *= scale;

    vec2 hvtemp = floor(uv1);
    uv1.x +=rand(vec2(hvtemp.y));

    // floor向下取整，计算出格子所在下标，
    // 10*10的格子，如果uv是 0.2345,0.2345,uv1就是2.345,2.345
    // 取整后 即为该uv所在格子下表，2,2
    // 0.2 <= uv < 0.3 该范围内所有uv坐标，处理后hv均为 2,2
    vec2 hv = floor(uv1);

    // fr是 fract对数字取小数部分， 0.2345,0.2345 -> uv1 2.345,2.345 -> 0.345,0.345    
    // 如 0.2 <= uv < 0.3 处理后就是一个范围 0-1的范围
    vec2 fr = fract(uv1);

    if (mod(floor(fr.x * 10.), 2.) == 0.) return 0.;

    if (radian == 0. && abs(fr.x - .5) > 0.02) return 0.;
    else if (radian != 0. && abs((fr.x - .5) / (fr.y - .5) - radian) > 0.02) return 0.;

    co += fr.x + fr.y;

    float strength = rand(hv); 
    // 让层亮度和格子大小成正比比例 （scale是uv的缩放数，越大 格子就越小）
    // * 9 是因为有些暗，变亮点，这个值可以随便调调
    strength *= 4. / scale;
    return co * strength;
  }

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if IS_RAIN
      vec3 co = vec3(0.);
      for(int i = 1;i < 3;i++ ){
        float idx = float(i);
        // 用循环下表做一个递增的层半径
        float p1 = idx * 5. + 5.;

        // 给每一层做一个随机运动方向 也就是一个速度向量
        vec2 uvoff = vec2(rand(vec2(p1 * 10.0)),rand(vec2(p1 * 10.0)));
        // 速度*时间 = 偏移距离 让该层随时间运动 可以注释掉 *u_time 就不会运动了
        uvoff = uvoff *cc_time.x * speed +.9;
        
        vec2 p2 = vec2(uv0.x - uvoff.x* radian, uv0.y - uvoff.y);
        // p1 半径， p2 供计算的uv值
        float layer = drawLayer(p1,p2);
        
        co += vec3(layer);
      }
      o.rgb *= co.rgb;
    #endif

    o += normalTexture(cc_spriteTexture, uv0);
    o *= color;
    ALPHA_TEST(o);
    return o;
  }
}%
