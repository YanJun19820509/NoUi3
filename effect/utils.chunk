
// 判断 defined 类型状态,type为 0/1
bool isTrue(float defines, bool isColor, float checkValue, float index){
  float a = 0.0;
  if (isColor){
    a = floor(floor(defines)/pow(10.,index));
    return a == checkValue;
  }else{
    a = fract(defines);
    float b = checkValue/a;
    return b - 10.0*floor(b/10.0) == 0.0;
  }
}

// 从扩展数据里解析颜色数据
vec4 getColorFromExt(vec3 ext){
  float r = floor(ext.x / 1000.0);
  float g = ext.x - r * 1000.0;
  float b = floor(ext.y / 1000.0);
  color = vec4(r/255.0,g/255.0,b/255.0,ext.z);
}

//随机函数
float rand(vec2 st){
  return fract(sin(dot(st,vec2(12.9898,78.233)))*43758.5453123);
}


float grayF(vec4 _color){
  return dot(_color.rgb, vec3(0.299,0.587,0.114));
}


//置灰,_o:color
vec4 gray(vec4 _o){
  //心理学灰度公式
  float gray  = grayF(_o);
  _o.r = _o.g = _o.b = gray;
  return _o;
}

//两个颜色混合，type为混合的方式，1：相加，2：相减，3：相乘，4：插值混合，5：加权求和，6：灰度混合
vec4 blend(vec4 _c1, vec4 _c2, float _type){
  if (_type == 1.) _c1 += _c2;
  else if (_type == 2.) _c1 -= _c2;
  else if (_type == 3.) _c1 *= _c2;
  else if (_type == 4.) _c1.rgb = mix(_c1.rgb, _c2.rgb, .618);
  else if (_type == 5.) _c1.rgb = _c1.rgb * .2 + _c2.rgb * 1.2;
  else if (_type == 6.) _c1.rgb = mix(_c1.rgb, _c2.rgb*1.5, grayF(_c2));
  return _c1;
}


// 一个彩虹色的色板，输入t的范围是[0, 1], 输出一个颜色值
  vec3 Pallete(float t) {
      // 滚动动起来
      t += cc_time.x;
      
      vec3 dcOffset = vec3(0.5, 0.5, 0.5);
      vec3 amp = vec3(1., 1., 1.);
      vec3 freq = vec3(1., 1., 1.);
      vec3 phase = vec3(0., 0.3333, 0.6666);
      return dcOffset + amp * cos(2. * 3.14159 * (freq * t + phase));
  }



//扫光效果
vec4 shine(vec4 _o, vec2 _uv, float _start, float _width, float _strength, bool _reverse){
      
  // 斜线控制区域. 其实就是 y = -x+width  y = -x -width 夹着的区域. 还可以乘上斜率,以使扫光的倾斜程度变化. 加上time 时间控制, 可以使区域根据时间推移,平滑的从左往右移动.

  if(_uv.x <= (-_uv.y + _width + _start) && _uv.x >= (-_uv.y - _width + _start)) {
    _o *= _strength;  // 给颜色增强若干倍. 
  }
  else if( _reverse ) {  
    // 可以通过参数控制, 是否仅显示扫光区域, 看起来就会变成一道光照亮了一片区域,而其他地方则是虚无. 手电筒的效果.
    discard;
  }
  return _o;
}



//圆形头像裁剪效果带羽化
vec4 mask(vec4 _o, vec2 _uv, vec2 _center, float _radius, float _feather){
    // 计算当前坐标点与 中心点(0.5, 0.5)的距离, 距离超过半径的点,直接 discard; 即return.
    float dis = distance(_uv, _center);

    if( dis > _radius ){
        discard;
    }

    // 判断圆形周边的一圈像素, 根据羽化参数大小, 对周边一圈颜色的透明度进行平滑降低, 即>0.5r 为透明a=0, < 0.4r为不透明a=1,  否则透明度a= 线性0~1过渡.
    // dis < 0.4 则为1, >0.5则为0, 否则就为0~1之间插值
    if( _feather > 0.0 ){
      _o.a *= smoothstep(_radius, _radius - _feather, dis);
    }
  return _o;
}



// 圆角矩形
void roundedRectangle(vec2 _uv, vec2 _center, float _radius, float _base){

  // 计算出以4个圆角圆心的坐标点区域.
  vec2 uv = _uv - _center;
  uv.x = abs(uv.x);
  uv.y = abs(uv.y);

  float r = _base- _radius;
  
  if (uv.x > r && uv.y > r) {
    uv.x -= r;
    uv.y -= r;

    // 计算平移后的坐标点距离圆心(0 ,0 )的距离, 与圆形头像原理一致,
    float dis = distance(uv, vec2(0,0));

    if( dis >= _radius ) {
      discard;
    }
  }
}



//渐变消失效果
vec4 fadeOut(vec4 _o,vec2 _uv,  float _time, float _width, bool _vertical){
  // 外部控制从上到下还是从左向右消失.
  if (_o.a > 0.3){
    if(_vertical) {
        // 对消失区域进行透明度插值渐变.
        _o.a *= smoothstep(_time - _width, _time, _uv.y);
    } else {
        _o.a *= smoothstep(_time - _width, _time, _uv.x);
    }
  } else _o.a = 0.0;
  return _o;
}



//高斯模糊纹理效果
vec4 blurTexture(vec4 _o, vec2 _uv, float _offset){
  // 随机采样次数.
  const float repeats = 10.;

  for(float i=0.0; i<repeats ; i++) {

    // 以下两步, 主要用来产生一个随机偏移量, 即以当前_uv坐标为基础, 叠加一个偏移量, 从而获得偏移后的周边某点的采样颜色.
      vec2 q = vec2(
        cos(degrees(i*360.0/repeats)),
        sin(degrees(i*360.0/repeats))
      );
      q*= (rand(vec2(i,_uv.x + _uv.y ))+ _offset );
      vec2 uv2 = _uv + q*_offset;
      
      // 将周边某点颜色叠加到一起进行颜色混合.
      _o += normalTexture(cc_spriteTexture, uv2);
  }

  // 中和, 刚才的循环累加了repeats 次, 颜色分量应当除以repeats, 否则颜色分量可能超过1,即高曝光效果.
  _o /= repeats;

  // 降低亮度. 并用节点本身颜色进行混合.
  float light = 0.7;
  _o *= light;
  _o.a = step(0.4, _o.a);

  return _o;
}



//溶解效果(若干像素变没了, 像腐烂的破布)
vec4 dissolve(vec4 _o, float _time) {

  // 将当前坐标点的三个颜色分量进行混合, 并把其中小于某值的颜色 discard;掉.
  // 实际应用场景可能需要另外单独提供一张用来判断是否discard像素的贴图,此处简化,直接对当前图像的色彩进行判断.
  float h = (_o.g + _o.r + _o.b)/3.0;
  
  // 动态修改time 即颜色动态融化的效果. 
  if(h < _time) {
    discard;
  }
  return _o;
}



//描边
bool isStroke(sampler2D _texture, vec2 _uv, float _outlineWidth) {
  float cosArray[12], sinArray[12]; 
  cosArray[0] = 1.0;
  cosArray[1] = 0.866;
  cosArray[2] = .5;
  cosArray[3] = 0.;
  cosArray[4] = -.5;
  cosArray[5] = -0.866;
  cosArray[6] = -.1;
  cosArray[7] = -0.866;
  cosArray[8] = -.5;
  cosArray[9] = 0.;
  cosArray[10] = .5;
  cosArray[11] = 0.866;
  sinArray[0] = 0.;
  sinArray[1] = 0.5;
  sinArray[2] = 0.866;
  sinArray[3] = 1.;
  sinArray[4] = 0.866;
  sinArray[5] = 0.5;
  sinArray[6] = 0.;
  sinArray[7] = -0.5;
  sinArray[8] = -.866;
  sinArray[9] = -1.;
  sinArray[10] = -.866;
  sinArray[11] = -0.5;
  int stroke = 0;
  for(int i = 0; i < 12; i++){
    float a = normalTexture(_texture, vec2(_uv.x + _outlineWidth * cosArray[i], _uv.y + _outlineWidth * sinArray[i])).a;
    if (a < 0.3)
    {
        stroke += 1;
    }
  }
  return stroke > 0;
}


//流动
vec4 flow(sampler2D _texture, vec2 _uv, float _speed, bool isVertical, bool isVerse) {
  float offset = fract(cc_time.x*_speed);
  if (isVerse) offset = 1. - offset;
  vec2 uv = _uv + vec2(isVertical ? 0. : offset, isVertical ? offset : 0.);
  uv -= step(1., uv);

  return normalTexture(_texture, uv);
}

//纹理UV切换
vec4 textureSwitch(sampler2D _texture, vec2 _uv, vec2 _cells, float _fps){
  float index = floor(cc_time.x * _fps);

  float row = _cells.x;
  float col = _cells.y;

  vec2 offset = vec2(mod(index,col)/col,floor(index/col)/row);

  return texture(_texture, _uv / _cells.yx + offset);
}


//波纹
// amplitude: { value: 0.05, range: [0.0, 0.5], editor: { tooltip: '振幅' } }
//         angularVelocity: { value: 10.0, editor: { tooltip: '角速度' } }
//         frequency: { value: 10.0, editor: { tooltip: '频率' } }
//         offset: { value: 0.5, range: [0.0, 1.0], editor: { tooltip: '偏距' } }
//         toLeft: { value: false, editor: { type: boolean, tooltip: '向左（方向）' } }
vec4 wave(sampler2D _texture, vec2 _uv, float _amplitude,float _angularVelocity, float _frequency, float _offset, bool _toLeft){
  float y = _amplitude * sin((_angularVelocity * _uv.x) + ((_frequency * cc_time.x) * (_toLeft ? 1. : -1.))) + _offset;
  vec2 uv = _uv + vec2(0., y);
  uv.y -= 0.5;
  vec4 c = normalTexture(_texture, uv);
    //超出纹理范围的用透明填充
  if (uv.y < 0. || uv.y > 1.) c.a = 0.;
  return c;
}

void graphicsWave(vec4 _o, vec2 _uv, float _amplitude,float _angularVelocity, float _frequency, float _offset, bool _toLeft){
  float y = _amplitude * sin((_angularVelocity * _uv.x) + ((_frequency * cc_time.x) * (_toLeft ? 1. : -1.))) + _offset;
    //超出偏移的丢弃
  if (_uv.y > y) discard;
}


/**
纹理平铺，
_uv 当前 uv
_scale 平铺比例，值越大，平铺后数量越多
_speed 位移速度
_offsetY y 方向偏移
**/
vec2 tiled(vec2 _uv, float _scale, float _speed, float _offsetY){
  vec2 uv = _uv * _scale - vec2(cc_time.x,cc_time.x) / _speed;
  float b = floor(uv.x);
  uv.y -= b / _offsetY;
  if (mod(b,2.) == 1. || mod(floor(uv.y),2.) == 1.) {discard;}
  uv = fract(uv);
  return uv;
}


vec4 scale(vec4 o,vec2 _uv, vec4 color, vec2 point, float scaleMin, float scaleMax){
  vec2 uv = vec2(point.x,point.y);
  float smin = scaleMin;// * (1.0 - uv.y);
  float s = smin + (scaleMax - smin) *_uv.y;
  // float s = .5+uv.y;
  uv.x = uv.x - (uv.x - _uv.x)/s;
  uv.y = uv.y - (uv.y - _uv.y)/s;
  if(uv.x > 1.0 || uv.x < 0.0 || uv.y > 1.0 || uv.y < 0.0){
    //超出纹理范围的用透明填充
    o = vec4(0, 0, 0, 0);
  }else{
    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv); 
    if(o.a == 0.0){
      //发现透明度为0的坐标，直接用透明填充
      o = vec4(0, 0, 0, 0);
    }
  }
  o *= color;
  return o;
}

