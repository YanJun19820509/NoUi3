// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      properties: &props
        mainTexture0:    { value: grey }
        mainTexture1:    { value: grey }
        mainTexture2:    { value: grey }
        mainTexture3:    { value: grey }
        mainTexture4:    { value: grey }
        mainTexture5:    { value: grey }
        mainTexture6:    { value: grey }
        mainTexture7:    { value: grey }
        tilingOffset:   { value: [1, 1, 0, 0] }
        mainColor:      { value: [1, 1, 1, 1], linear: true, editor: { type: color } }
        colorScale:     { value: [1, 1, 1], target: colorScaleAndCutoff.xyz }
        alphaThreshold: { value: 0.5, target: colorScaleAndCutoff.w, editor: { parent: USE_ALPHA_TEST } }
        color:          { target: mainColor, linear: true, editor: { visible: false } } # backward compability
      migrations: &migs
        properties:
          mainColor:    { formerlySerializedAs: color }
  - name: transparent
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      depthStencilState: &d1
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
      migrations: *migs
  - name: add
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: &r1 { cullMode: none }
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one
          blendSrcAlpha: src_alpha
          blendDstAlpha: one
      properties: *props
      migrations: *migs
  - name: alpha-blend
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: *r1
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
      migrations: *migs
}%

CCProgram unlit-vs %{
  precision highp float;
  #include <legacy/input>
  #include <builtin/uniforms/cc-global>
  #include <legacy/decode-base>
  #include <legacy/local-batch>
  #include <legacy/input>
  #include <legacy/fog-vs>

  #if USE_VERTEX_COLOR
    in lowp vec4 a_color;
    out lowp vec4 v_color;
    out vec2 ext;
    out float def;
  #endif

  #if USE_TEXTURE
    out vec2 uv0;
    uniform TexCoords {
      vec4 tilingOffset;
    };
  #endif

  

  vec4 vert () {
    vec4 position;
    CCVertInput(position);

    mat4 matWorld;
    CCGetWorldMatrix(matWorld);

    #if USE_TEXTURE
      uv0 = a_texCoord * tilingOffset.xy + tilingOffset.zw;
      #if SAMPLE_FROM_RT
        CC_HANDLE_RT_SAMPLE_FLIP(uv0);
      #endif
    #endif

    #if USE_VERTEX_COLOR
      v_color = vec4(1, 1, 1, a_color.a);
      def = a_color.r;
      if (def < 0.0){
        //设置扩展参数
        ext = a_color.gb;
      }else{
        //正常
        ext = vec2(0,0);
      }
    #endif


    CC_TRANSFER_FOG(matWorld * position);
    return cc_matProj * (cc_matView * matWorld) * position;
  }
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <legacy/output-standard>
  #include <legacy/fog-fs>
  #include <../../effect/utils>

  #if USE_ALPHA_TEST
    #pragma define-meta ALPHA_TEST_CHANNEL options([a, r, g, b])
  #endif

  #if USE_TEXTURE
    in vec2 uv0;
    uniform sampler2D mainTexture0;
    uniform sampler2D mainTexture1;
    uniform sampler2D mainTexture2;
    uniform sampler2D mainTexture3;
    uniform sampler2D mainTexture4;
    uniform sampler2D mainTexture5;
    uniform sampler2D mainTexture6;
    uniform sampler2D mainTexture7;
  #endif

  uniform Constant {
    vec4 mainColor;
    vec4 colorScaleAndCutoff;
  };

  #if USE_VERTEX_COLOR
    in lowp vec4 v_color;
    in vec2 ext;
    in float def;
    
    vec4 setTexture(float type, vec2 uv, vec4 _color){
      //贴图纹理取值0
      if (type == 1.){ 
        _color *= texture(mainTexture0, uv);
      }

      //贴图纹理取值1
      else if (type == 2.){ 
        _color *= texture(mainTexture1, uv);
      }

      //贴图纹理取值2
      else if (type == 3.){ 
        _color *= texture(mainTexture2, uv);
      }

      //贴图纹理取值3
      else if (type == 4.){ 
        _color *= texture(mainTexture3, uv);
      }

      //贴图纹理取值4
      else if (type == 5.){ 
        _color *= texture(mainTexture4, uv);
      }

      //贴图纹理取值5
      else if (type == 6.){ 
        _color *= texture(mainTexture5, uv);
      }

      //贴图纹理取值6
      else if (type == 7.){ 
        _color *= texture(mainTexture6, uv);
      }

      //贴图纹理取值7
      else if (type == 8.){ 
        _color *= texture(mainTexture7, uv);
      }
      
      return _color;
    }

    vec4 setEffect(float type, vec4 _color){
        //置灰
        if(type == 2.){ 
          _color = gray(_color);
        }
        
        //挖方孔
        if(type == 3.){ 
            vec2 uv = uv0;
            uv.y *= cc_screenSize.y / cc_screenSize.x;
            float x1 = floor(ext.x) / 100.;
            float y1 = fract(ext.x) * cc_screenSize.y / cc_screenSize.x;
            float x2 = floor(ext.y) / 100.;
            float y2 = fract(ext.y) * cc_screenSize.y / cc_screenSize.x;
            
            if(uv.x > x1 && uv.x < x2 && uv.y > y1 && uv.y < y2){
              _color.a = 0.;
            }
        }

        //挖圆孔
        if(type == 4.){ 
            vec2 uv = uv0;
            uv.y *= cc_screenSize.y / cc_screenSize.x;
            float x = floor(ext.x) / 100.;
            float y = fract(ext.x) * cc_screenSize.y / cc_screenSize.x;
            float r = ext.y;
            float dis = distance(uv, vec2(x,y));
            
            if(dis<=r){
              _color.a *= smoothstep(.8, 1., dis/r);
            }
        }

        //遮罩上色
        else if(type == 5.){
            _color = maskColor(_color);
        }

        //黑色遮罩上色
        else if(type == 6.){
            _color = blackMaskColor(_color);
        }

        //进度条
        else if(type == 7.){
          _color.a *= (1. - step(ext.x, uv0.x)) * (1. - step(ext.y, uv0.y));
        }
        return _color;
    }
  #endif

  vec4 frag () {
    vec4 o = mainColor;
    o.rgb *= colorScaleAndCutoff.xyz;

    #if USE_VERTEX_COLOR
      o.rgb *= SRGBToLinear(v_color.rgb);//use linear
      o.a *= v_color.a;
      #if USE_TEXTURE
        if (def < 0.0){
          float defs = abs(def);
          float t1 = floor((defs+1.)/100.);//有些手机整除后floor后会-1，所以不能整除
          float t2 = (defs - t1 * 100.);
          o = setTexture(t1, uv0, o);
          o = setEffect(t2, o);
        }else{
          vec4 texColor = texture(mainTexture0, uv0);
          texColor.rgb = SRGBToLinear(texColor.rgb);
          o *= texColor;
        }
      #endif
    #endif

    #if USE_ALPHA_TEST
      if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;
    #endif

    CC_APPLY_FOG(o);
    return CCFragOutput(o);
  }
}%
